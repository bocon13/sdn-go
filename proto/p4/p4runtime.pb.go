// Code generated by protoc-gen-go.
// source: proto/p4/p4runtime.proto
// DO NOT EDIT!

/*
Package p4 is a generated protocol buffer package.

It is generated from these files:
	proto/p4/p4runtime.proto

It has these top-level messages:
	WriteRequest
	WriteResponse
	ReadRequest
	ReadResponse
	Update
	Entity
	ExternEntry
	TableEntry
	FieldMatch
	TableAction
	Action
	ActionProfileMember
	ActionProfileGroup
	MeterEntry
	DirectMeterEntry
	MeterConfig
	CounterEntry
	DirectCounterEntry
	CounterData
	StreamMessageRequest
	PacketOut
	StreamMessageResponse
	PacketIn
	PacketMetadata
	MasterArbitrationUpdate
	Uint128
	SetForwardingPipelineConfigRequest
	SetForwardingPipelineConfigResponse
	ForwardingPipelineConfig
	GetForwardingPipelineConfigRequest
	GetForwardingPipelineConfigResponse
*/
package p4

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import p4_config "github.com/bocon13/sdn-go/proto/p4/config"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Update_Type int32

const (
	Update_UNSPECIFIED Update_Type = 0
	Update_INSERT      Update_Type = 1
	Update_MODIFY      Update_Type = 2
	Update_DELETE      Update_Type = 3
)

var Update_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "INSERT",
	2: "MODIFY",
	3: "DELETE",
}
var Update_Type_value = map[string]int32{
	"UNSPECIFIED": 0,
	"INSERT":      1,
	"MODIFY":      2,
	"DELETE":      3,
}

func (x Update_Type) String() string {
	return proto.EnumName(Update_Type_name, int32(x))
}
func (Update_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type ActionProfileGroup_Type int32

const (
	ActionProfileGroup_UNSPECIFIED   ActionProfileGroup_Type = 0
	ActionProfileGroup_SELECT        ActionProfileGroup_Type = 1
	ActionProfileGroup_FAST_FAILOVER ActionProfileGroup_Type = 2
)

var ActionProfileGroup_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "SELECT",
	2: "FAST_FAILOVER",
}
var ActionProfileGroup_Type_value = map[string]int32{
	"UNSPECIFIED":   0,
	"SELECT":        1,
	"FAST_FAILOVER": 2,
}

func (x ActionProfileGroup_Type) String() string {
	return proto.EnumName(ActionProfileGroup_Type_name, int32(x))
}
func (ActionProfileGroup_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

type SetForwardingPipelineConfigRequest_Action int32

const (
	SetForwardingPipelineConfigRequest_UNSPECIFIED       SetForwardingPipelineConfigRequest_Action = 0
	SetForwardingPipelineConfigRequest_VERIFY            SetForwardingPipelineConfigRequest_Action = 1
	SetForwardingPipelineConfigRequest_VERIFY_AND_SAVE   SetForwardingPipelineConfigRequest_Action = 2
	SetForwardingPipelineConfigRequest_VERIFY_AND_COMMIT SetForwardingPipelineConfigRequest_Action = 3
	SetForwardingPipelineConfigRequest_COMMIT            SetForwardingPipelineConfigRequest_Action = 4
)

var SetForwardingPipelineConfigRequest_Action_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "VERIFY",
	2: "VERIFY_AND_SAVE",
	3: "VERIFY_AND_COMMIT",
	4: "COMMIT",
}
var SetForwardingPipelineConfigRequest_Action_value = map[string]int32{
	"UNSPECIFIED":       0,
	"VERIFY":            1,
	"VERIFY_AND_SAVE":   2,
	"VERIFY_AND_COMMIT": 3,
	"COMMIT":            4,
}

func (x SetForwardingPipelineConfigRequest_Action) String() string {
	return proto.EnumName(SetForwardingPipelineConfigRequest_Action_name, int32(x))
}
func (SetForwardingPipelineConfigRequest_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

// ------------------------------------------------------------------------------
type WriteRequest struct {
	DeviceId   uint64    `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	ElectionId *Uint128  `protobuf:"bytes,2,opt,name=election_id,json=electionId" json:"election_id,omitempty"`
	Updates    []*Update `protobuf:"bytes,3,rep,name=updates" json:"updates,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WriteRequest) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *WriteRequest) GetElectionId() *Uint128 {
	if m != nil {
		return m.ElectionId
	}
	return nil
}

func (m *WriteRequest) GetUpdates() []*Update {
	if m != nil {
		return m.Updates
	}
	return nil
}

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReadRequest struct {
	DeviceId uint64    `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Entities []*Entity `protobuf:"bytes,2,rep,name=entities" json:"entities,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadRequest) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *ReadRequest) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type ReadResponse struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
	// Set to true if no responses will follow this one.
	Complete bool `protobuf:"varint,2,opt,name=complete" json:"complete,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadResponse) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *ReadResponse) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type Update struct {
	Type   Update_Type `protobuf:"varint,1,opt,name=type,enum=p4.Update_Type" json:"type,omitempty"`
	Entity *Entity     `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Update) GetType() Update_Type {
	if m != nil {
		return m.Type
	}
	return Update_UNSPECIFIED
}

func (m *Update) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Entity struct {
	// Types that are valid to be assigned to Entity:
	//	*Entity_ExternEntry
	//	*Entity_TableEntry
	//	*Entity_ActionProfileMember
	//	*Entity_ActionProfileGroup
	//	*Entity_MeterEntry
	//	*Entity_DirectMeterEntry
	//	*Entity_CounterEntry
	//	*Entity_DirectCounterEntry
	Entity isEntity_Entity `protobuf_oneof:"entity"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_ExternEntry struct {
	ExternEntry *ExternEntry `protobuf:"bytes,1,opt,name=extern_entry,json=externEntry,oneof"`
}
type Entity_TableEntry struct {
	TableEntry *TableEntry `protobuf:"bytes,2,opt,name=table_entry,json=tableEntry,oneof"`
}
type Entity_ActionProfileMember struct {
	ActionProfileMember *ActionProfileMember `protobuf:"bytes,3,opt,name=action_profile_member,json=actionProfileMember,oneof"`
}
type Entity_ActionProfileGroup struct {
	ActionProfileGroup *ActionProfileGroup `protobuf:"bytes,4,opt,name=action_profile_group,json=actionProfileGroup,oneof"`
}
type Entity_MeterEntry struct {
	MeterEntry *MeterEntry `protobuf:"bytes,5,opt,name=meter_entry,json=meterEntry,oneof"`
}
type Entity_DirectMeterEntry struct {
	DirectMeterEntry *DirectMeterEntry `protobuf:"bytes,6,opt,name=direct_meter_entry,json=directMeterEntry,oneof"`
}
type Entity_CounterEntry struct {
	CounterEntry *CounterEntry `protobuf:"bytes,7,opt,name=counter_entry,json=counterEntry,oneof"`
}
type Entity_DirectCounterEntry struct {
	DirectCounterEntry *DirectCounterEntry `protobuf:"bytes,8,opt,name=direct_counter_entry,json=directCounterEntry,oneof"`
}

func (*Entity_ExternEntry) isEntity_Entity()         {}
func (*Entity_TableEntry) isEntity_Entity()          {}
func (*Entity_ActionProfileMember) isEntity_Entity() {}
func (*Entity_ActionProfileGroup) isEntity_Entity()  {}
func (*Entity_MeterEntry) isEntity_Entity()          {}
func (*Entity_DirectMeterEntry) isEntity_Entity()    {}
func (*Entity_CounterEntry) isEntity_Entity()        {}
func (*Entity_DirectCounterEntry) isEntity_Entity()  {}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *Entity) GetExternEntry() *ExternEntry {
	if x, ok := m.GetEntity().(*Entity_ExternEntry); ok {
		return x.ExternEntry
	}
	return nil
}

func (m *Entity) GetTableEntry() *TableEntry {
	if x, ok := m.GetEntity().(*Entity_TableEntry); ok {
		return x.TableEntry
	}
	return nil
}

func (m *Entity) GetActionProfileMember() *ActionProfileMember {
	if x, ok := m.GetEntity().(*Entity_ActionProfileMember); ok {
		return x.ActionProfileMember
	}
	return nil
}

func (m *Entity) GetActionProfileGroup() *ActionProfileGroup {
	if x, ok := m.GetEntity().(*Entity_ActionProfileGroup); ok {
		return x.ActionProfileGroup
	}
	return nil
}

func (m *Entity) GetMeterEntry() *MeterEntry {
	if x, ok := m.GetEntity().(*Entity_MeterEntry); ok {
		return x.MeterEntry
	}
	return nil
}

func (m *Entity) GetDirectMeterEntry() *DirectMeterEntry {
	if x, ok := m.GetEntity().(*Entity_DirectMeterEntry); ok {
		return x.DirectMeterEntry
	}
	return nil
}

func (m *Entity) GetCounterEntry() *CounterEntry {
	if x, ok := m.GetEntity().(*Entity_CounterEntry); ok {
		return x.CounterEntry
	}
	return nil
}

func (m *Entity) GetDirectCounterEntry() *DirectCounterEntry {
	if x, ok := m.GetEntity().(*Entity_DirectCounterEntry); ok {
		return x.DirectCounterEntry
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Entity) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Entity_OneofMarshaler, _Entity_OneofUnmarshaler, _Entity_OneofSizer, []interface{}{
		(*Entity_ExternEntry)(nil),
		(*Entity_TableEntry)(nil),
		(*Entity_ActionProfileMember)(nil),
		(*Entity_ActionProfileGroup)(nil),
		(*Entity_MeterEntry)(nil),
		(*Entity_DirectMeterEntry)(nil),
		(*Entity_CounterEntry)(nil),
		(*Entity_DirectCounterEntry)(nil),
	}
}

func _Entity_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Entity)
	// entity
	switch x := m.Entity.(type) {
	case *Entity_ExternEntry:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExternEntry); err != nil {
			return err
		}
	case *Entity_TableEntry:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TableEntry); err != nil {
			return err
		}
	case *Entity_ActionProfileMember:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActionProfileMember); err != nil {
			return err
		}
	case *Entity_ActionProfileGroup:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ActionProfileGroup); err != nil {
			return err
		}
	case *Entity_MeterEntry:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MeterEntry); err != nil {
			return err
		}
	case *Entity_DirectMeterEntry:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectMeterEntry); err != nil {
			return err
		}
	case *Entity_CounterEntry:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CounterEntry); err != nil {
			return err
		}
	case *Entity_DirectCounterEntry:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectCounterEntry); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Entity.Entity has unexpected type %T", x)
	}
	return nil
}

func _Entity_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Entity)
	switch tag {
	case 1: // entity.extern_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExternEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_ExternEntry{msg}
		return true, err
	case 2: // entity.table_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TableEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_TableEntry{msg}
		return true, err
	case 3: // entity.action_profile_member
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionProfileMember)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_ActionProfileMember{msg}
		return true, err
	case 4: // entity.action_profile_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionProfileGroup)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_ActionProfileGroup{msg}
		return true, err
	case 5: // entity.meter_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MeterEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_MeterEntry{msg}
		return true, err
	case 6: // entity.direct_meter_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectMeterEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_DirectMeterEntry{msg}
		return true, err
	case 7: // entity.counter_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CounterEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_CounterEntry{msg}
		return true, err
	case 8: // entity.direct_counter_entry
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectCounterEntry)
		err := b.DecodeMessage(msg)
		m.Entity = &Entity_DirectCounterEntry{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Entity_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Entity)
	// entity
	switch x := m.Entity.(type) {
	case *Entity_ExternEntry:
		s := proto.Size(x.ExternEntry)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_TableEntry:
		s := proto.Size(x.TableEntry)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_ActionProfileMember:
		s := proto.Size(x.ActionProfileMember)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_ActionProfileGroup:
		s := proto.Size(x.ActionProfileGroup)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_MeterEntry:
		s := proto.Size(x.MeterEntry)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_DirectMeterEntry:
		s := proto.Size(x.DirectMeterEntry)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_CounterEntry:
		s := proto.Size(x.CounterEntry)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Entity_DirectCounterEntry:
		s := proto.Size(x.DirectCounterEntry)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ExternEntry struct {
	// the extern_type_id is assigned during compilation. It is likely that this
	// id will in fact come from a P4 annotation to the extern declaration and
	// that each vendor will receive a prefix to avoid collisions.
	ExternTypeId uint32               `protobuf:"varint,1,opt,name=extern_type_id,json=externTypeId" json:"extern_type_id,omitempty"`
	ExternId     uint32               `protobuf:"varint,2,opt,name=extern_id,json=externId" json:"extern_id,omitempty"`
	Entry        *google_protobuf.Any `protobuf:"bytes,3,opt,name=entry" json:"entry,omitempty"`
}

func (m *ExternEntry) Reset()                    { *m = ExternEntry{} }
func (m *ExternEntry) String() string            { return proto.CompactTextString(m) }
func (*ExternEntry) ProtoMessage()               {}
func (*ExternEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExternEntry) GetExternTypeId() uint32 {
	if m != nil {
		return m.ExternTypeId
	}
	return 0
}

func (m *ExternEntry) GetExternId() uint32 {
	if m != nil {
		return m.ExternId
	}
	return 0
}

func (m *ExternEntry) GetEntry() *google_protobuf.Any {
	if m != nil {
		return m.Entry
	}
	return nil
}

// From Section 11 of P4_14 spec:
// At run time, the table entry insert operation (not part of P4) must specify:
// - Values for each field specified in the reads entry.
// - The name of the action from the action_specification or the
//   action_profile_specification and the parameters to be passed to the action
//   function when it is called.
type TableEntry struct {
	TableId uint32        `protobuf:"varint,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Match   []*FieldMatch `protobuf:"bytes,2,rep,name=match" json:"match,omitempty"`
	Action  *TableAction  `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	// Ignored unless match implies a TCAM lookup, i.e. at least one of the
	// match fields is Ternary or Range.
	// A higher number indicates higher priority.
	// Only the highest priority entry that matches the packet must be selected.
	// Given an existing entry with prority k, if the controller tries to insert
	// or modify another entry with priority k such that a packet may match both
	// entries, an error is returned. This will be the case if the overlap is
	// strict (entries are identical) or not.
	// In the future, if there is a use-case, a table-level annotation may be
	// introduced to make the overlap check non-strict. In that case, if there
	// are multiple matching entries with the same highest priority, the selected
	// entry will be explicitly undefined.
	Priority int32 `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	// Metadata (cookie) opaque to the target. There is no requirement of where
	// this is stored, as long as it is returned with the rest of the entry in
	// a Read RPC.
	ControllerMetadata uint64 `protobuf:"varint,5,opt,name=controller_metadata,json=controllerMetadata" json:"controller_metadata,omitempty"`
	// meter_config and counter_data are convenience fields that enable the
	// controller to configure the direct resources associated with the table at
	// the same time as a match-action entry is inserted or modified. When
	// updating a table entry, leaving these fields unset means that the direct
	// resources (if any) will not be updated. When reading a table entry, the
	// values associated with the direct resources (if any) will be returned. If
	// the table does not support a direct resource, then setting the
	// corresponding direct resource field in any table write operation will
	// return an error.
	MeterConfig *MeterConfig `protobuf:"bytes,6,opt,name=meter_config,json=meterConfig" json:"meter_config,omitempty"`
	CounterData *CounterData `protobuf:"bytes,7,opt,name=counter_data,json=counterData" json:"counter_data,omitempty"`
}

func (m *TableEntry) Reset()                    { *m = TableEntry{} }
func (m *TableEntry) String() string            { return proto.CompactTextString(m) }
func (*TableEntry) ProtoMessage()               {}
func (*TableEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TableEntry) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

func (m *TableEntry) GetMatch() []*FieldMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *TableEntry) GetAction() *TableAction {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *TableEntry) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TableEntry) GetControllerMetadata() uint64 {
	if m != nil {
		return m.ControllerMetadata
	}
	return 0
}

func (m *TableEntry) GetMeterConfig() *MeterConfig {
	if m != nil {
		return m.MeterConfig
	}
	return nil
}

func (m *TableEntry) GetCounterData() *CounterData {
	if m != nil {
		return m.CounterData
	}
	return nil
}

// field_match_type ::= exact | ternary | lpm | range | valid
type FieldMatch struct {
	FieldId uint32 `protobuf:"varint,1,opt,name=field_id,json=fieldId" json:"field_id,omitempty"`
	// Types that are valid to be assigned to FieldMatchType:
	//	*FieldMatch_Exact_
	//	*FieldMatch_Ternary_
	//	*FieldMatch_Lpm
	//	*FieldMatch_Range_
	//	*FieldMatch_Valid_
	FieldMatchType isFieldMatch_FieldMatchType `protobuf_oneof:"field_match_type"`
}

func (m *FieldMatch) Reset()                    { *m = FieldMatch{} }
func (m *FieldMatch) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch) ProtoMessage()               {}
func (*FieldMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isFieldMatch_FieldMatchType interface {
	isFieldMatch_FieldMatchType()
}

type FieldMatch_Exact_ struct {
	Exact *FieldMatch_Exact `protobuf:"bytes,2,opt,name=exact,oneof"`
}
type FieldMatch_Ternary_ struct {
	Ternary *FieldMatch_Ternary `protobuf:"bytes,3,opt,name=ternary,oneof"`
}
type FieldMatch_Lpm struct {
	Lpm *FieldMatch_LPM `protobuf:"bytes,4,opt,name=lpm,oneof"`
}
type FieldMatch_Range_ struct {
	Range *FieldMatch_Range `protobuf:"bytes,6,opt,name=range,oneof"`
}
type FieldMatch_Valid_ struct {
	Valid *FieldMatch_Valid `protobuf:"bytes,7,opt,name=valid,oneof"`
}

func (*FieldMatch_Exact_) isFieldMatch_FieldMatchType()   {}
func (*FieldMatch_Ternary_) isFieldMatch_FieldMatchType() {}
func (*FieldMatch_Lpm) isFieldMatch_FieldMatchType()      {}
func (*FieldMatch_Range_) isFieldMatch_FieldMatchType()   {}
func (*FieldMatch_Valid_) isFieldMatch_FieldMatchType()   {}

func (m *FieldMatch) GetFieldMatchType() isFieldMatch_FieldMatchType {
	if m != nil {
		return m.FieldMatchType
	}
	return nil
}

func (m *FieldMatch) GetFieldId() uint32 {
	if m != nil {
		return m.FieldId
	}
	return 0
}

func (m *FieldMatch) GetExact() *FieldMatch_Exact {
	if x, ok := m.GetFieldMatchType().(*FieldMatch_Exact_); ok {
		return x.Exact
	}
	return nil
}

func (m *FieldMatch) GetTernary() *FieldMatch_Ternary {
	if x, ok := m.GetFieldMatchType().(*FieldMatch_Ternary_); ok {
		return x.Ternary
	}
	return nil
}

func (m *FieldMatch) GetLpm() *FieldMatch_LPM {
	if x, ok := m.GetFieldMatchType().(*FieldMatch_Lpm); ok {
		return x.Lpm
	}
	return nil
}

func (m *FieldMatch) GetRange() *FieldMatch_Range {
	if x, ok := m.GetFieldMatchType().(*FieldMatch_Range_); ok {
		return x.Range
	}
	return nil
}

func (m *FieldMatch) GetValid() *FieldMatch_Valid {
	if x, ok := m.GetFieldMatchType().(*FieldMatch_Valid_); ok {
		return x.Valid
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FieldMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FieldMatch_OneofMarshaler, _FieldMatch_OneofUnmarshaler, _FieldMatch_OneofSizer, []interface{}{
		(*FieldMatch_Exact_)(nil),
		(*FieldMatch_Ternary_)(nil),
		(*FieldMatch_Lpm)(nil),
		(*FieldMatch_Range_)(nil),
		(*FieldMatch_Valid_)(nil),
	}
}

func _FieldMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FieldMatch)
	// field_match_type
	switch x := m.FieldMatchType.(type) {
	case *FieldMatch_Exact_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Exact); err != nil {
			return err
		}
	case *FieldMatch_Ternary_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ternary); err != nil {
			return err
		}
	case *FieldMatch_Lpm:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Lpm); err != nil {
			return err
		}
	case *FieldMatch_Range_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Range); err != nil {
			return err
		}
	case *FieldMatch_Valid_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Valid); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FieldMatch.FieldMatchType has unexpected type %T", x)
	}
	return nil
}

func _FieldMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FieldMatch)
	switch tag {
	case 2: // field_match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldMatch_Exact)
		err := b.DecodeMessage(msg)
		m.FieldMatchType = &FieldMatch_Exact_{msg}
		return true, err
	case 3: // field_match_type.ternary
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldMatch_Ternary)
		err := b.DecodeMessage(msg)
		m.FieldMatchType = &FieldMatch_Ternary_{msg}
		return true, err
	case 4: // field_match_type.lpm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldMatch_LPM)
		err := b.DecodeMessage(msg)
		m.FieldMatchType = &FieldMatch_Lpm{msg}
		return true, err
	case 6: // field_match_type.range
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldMatch_Range)
		err := b.DecodeMessage(msg)
		m.FieldMatchType = &FieldMatch_Range_{msg}
		return true, err
	case 7: // field_match_type.valid
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FieldMatch_Valid)
		err := b.DecodeMessage(msg)
		m.FieldMatchType = &FieldMatch_Valid_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FieldMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FieldMatch)
	// field_match_type
	switch x := m.FieldMatchType.(type) {
	case *FieldMatch_Exact_:
		s := proto.Size(x.Exact)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldMatch_Ternary_:
		s := proto.Size(x.Ternary)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldMatch_Lpm:
		s := proto.Size(x.Lpm)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldMatch_Range_:
		s := proto.Size(x.Range)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *FieldMatch_Valid_:
		s := proto.Size(x.Valid)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Matches can be performed on arbitrarily-large inputs; the protobuf type
// 'bytes' is used to model arbitrarily-large values.
type FieldMatch_Exact struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *FieldMatch_Exact) Reset()                    { *m = FieldMatch_Exact{} }
func (m *FieldMatch_Exact) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch_Exact) ProtoMessage()               {}
func (*FieldMatch_Exact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *FieldMatch_Exact) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type FieldMatch_Ternary struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Mask  []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (m *FieldMatch_Ternary) Reset()                    { *m = FieldMatch_Ternary{} }
func (m *FieldMatch_Ternary) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch_Ternary) ProtoMessage()               {}
func (*FieldMatch_Ternary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 1} }

func (m *FieldMatch_Ternary) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldMatch_Ternary) GetMask() []byte {
	if m != nil {
		return m.Mask
	}
	return nil
}

type FieldMatch_LPM struct {
	Value     []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	PrefixLen int32  `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
}

func (m *FieldMatch_LPM) Reset()                    { *m = FieldMatch_LPM{} }
func (m *FieldMatch_LPM) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch_LPM) ProtoMessage()               {}
func (*FieldMatch_LPM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 2} }

func (m *FieldMatch_LPM) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldMatch_LPM) GetPrefixLen() int32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

// A Range is logically a set that contains all values numerically between
// 'low' and 'high' inclusively.
type FieldMatch_Range struct {
	Low  []byte `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	High []byte `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
}

func (m *FieldMatch_Range) Reset()                    { *m = FieldMatch_Range{} }
func (m *FieldMatch_Range) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch_Range) ProtoMessage()               {}
func (*FieldMatch_Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 3} }

func (m *FieldMatch_Range) GetLow() []byte {
	if m != nil {
		return m.Low
	}
	return nil
}

func (m *FieldMatch_Range) GetHigh() []byte {
	if m != nil {
		return m.High
	}
	return nil
}

type FieldMatch_Valid struct {
	Value bool `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *FieldMatch_Valid) Reset()                    { *m = FieldMatch_Valid{} }
func (m *FieldMatch_Valid) String() string            { return proto.CompactTextString(m) }
func (*FieldMatch_Valid) ProtoMessage()               {}
func (*FieldMatch_Valid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 4} }

func (m *FieldMatch_Valid) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// table_actions ::= action_specification | action_profile_specification
type TableAction struct {
	// Types that are valid to be assigned to Type:
	//	*TableAction_Action
	//	*TableAction_ActionProfileMemberId
	//	*TableAction_ActionProfileGroupId
	Type isTableAction_Type `protobuf_oneof:"type"`
}

func (m *TableAction) Reset()                    { *m = TableAction{} }
func (m *TableAction) String() string            { return proto.CompactTextString(m) }
func (*TableAction) ProtoMessage()               {}
func (*TableAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isTableAction_Type interface {
	isTableAction_Type()
}

type TableAction_Action struct {
	Action *Action `protobuf:"bytes,1,opt,name=action,oneof"`
}
type TableAction_ActionProfileMemberId struct {
	ActionProfileMemberId uint32 `protobuf:"varint,2,opt,name=action_profile_member_id,json=actionProfileMemberId,oneof"`
}
type TableAction_ActionProfileGroupId struct {
	ActionProfileGroupId uint32 `protobuf:"varint,3,opt,name=action_profile_group_id,json=actionProfileGroupId,oneof"`
}

func (*TableAction_Action) isTableAction_Type()                {}
func (*TableAction_ActionProfileMemberId) isTableAction_Type() {}
func (*TableAction_ActionProfileGroupId) isTableAction_Type()  {}

func (m *TableAction) GetType() isTableAction_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TableAction) GetAction() *Action {
	if x, ok := m.GetType().(*TableAction_Action); ok {
		return x.Action
	}
	return nil
}

func (m *TableAction) GetActionProfileMemberId() uint32 {
	if x, ok := m.GetType().(*TableAction_ActionProfileMemberId); ok {
		return x.ActionProfileMemberId
	}
	return 0
}

func (m *TableAction) GetActionProfileGroupId() uint32 {
	if x, ok := m.GetType().(*TableAction_ActionProfileGroupId); ok {
		return x.ActionProfileGroupId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TableAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TableAction_OneofMarshaler, _TableAction_OneofUnmarshaler, _TableAction_OneofSizer, []interface{}{
		(*TableAction_Action)(nil),
		(*TableAction_ActionProfileMemberId)(nil),
		(*TableAction_ActionProfileGroupId)(nil),
	}
}

func _TableAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TableAction)
	// type
	switch x := m.Type.(type) {
	case *TableAction_Action:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Action); err != nil {
			return err
		}
	case *TableAction_ActionProfileMemberId:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ActionProfileMemberId))
	case *TableAction_ActionProfileGroupId:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ActionProfileGroupId))
	case nil:
	default:
		return fmt.Errorf("TableAction.Type has unexpected type %T", x)
	}
	return nil
}

func _TableAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TableAction)
	switch tag {
	case 1: // type.action
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Action)
		err := b.DecodeMessage(msg)
		m.Type = &TableAction_Action{msg}
		return true, err
	case 2: // type.action_profile_member_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &TableAction_ActionProfileMemberId{uint32(x)}
		return true, err
	case 3: // type.action_profile_group_id
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &TableAction_ActionProfileGroupId{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _TableAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TableAction)
	// type
	switch x := m.Type.(type) {
	case *TableAction_Action:
		s := proto.Size(x.Action)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TableAction_ActionProfileMemberId:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ActionProfileMemberId))
	case *TableAction_ActionProfileGroupId:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ActionProfileGroupId))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Action struct {
	ActionId uint32          `protobuf:"varint,1,opt,name=action_id,json=actionId" json:"action_id,omitempty"`
	Params   []*Action_Param `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
}

func (m *Action) Reset()                    { *m = Action{} }
func (m *Action) String() string            { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Action) GetActionId() uint32 {
	if m != nil {
		return m.ActionId
	}
	return 0
}

func (m *Action) GetParams() []*Action_Param {
	if m != nil {
		return m.Params
	}
	return nil
}

type Action_Param struct {
	ParamId uint32 `protobuf:"varint,2,opt,name=param_id,json=paramId" json:"param_id,omitempty"`
	Value   []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Action_Param) Reset()                    { *m = Action_Param{} }
func (m *Action_Param) String() string            { return proto.CompactTextString(m) }
func (*Action_Param) ProtoMessage()               {}
func (*Action_Param) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *Action_Param) GetParamId() uint32 {
	if m != nil {
		return m.ParamId
	}
	return 0
}

func (m *Action_Param) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// ------------------------------------------------------------------------------
type ActionProfileMember struct {
	ActionProfileId uint32  `protobuf:"varint,1,opt,name=action_profile_id,json=actionProfileId" json:"action_profile_id,omitempty"`
	MemberId        uint32  `protobuf:"varint,2,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Action          *Action `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
}

func (m *ActionProfileMember) Reset()                    { *m = ActionProfileMember{} }
func (m *ActionProfileMember) String() string            { return proto.CompactTextString(m) }
func (*ActionProfileMember) ProtoMessage()               {}
func (*ActionProfileMember) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ActionProfileMember) GetActionProfileId() uint32 {
	if m != nil {
		return m.ActionProfileId
	}
	return 0
}

func (m *ActionProfileMember) GetMemberId() uint32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *ActionProfileMember) GetAction() *Action {
	if m != nil {
		return m.Action
	}
	return nil
}

// ------------------------------------------------------------------------------
type ActionProfileGroup struct {
	ActionProfileId uint32                       `protobuf:"varint,1,opt,name=action_profile_id,json=actionProfileId" json:"action_profile_id,omitempty"`
	GroupId         uint32                       `protobuf:"varint,2,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Type            ActionProfileGroup_Type      `protobuf:"varint,3,opt,name=type,enum=p4.ActionProfileGroup_Type" json:"type,omitempty"`
	Members         []*ActionProfileGroup_Member `protobuf:"bytes,4,rep,name=members" json:"members,omitempty"`
	MaxSize         int32                        `protobuf:"varint,5,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
}

func (m *ActionProfileGroup) Reset()                    { *m = ActionProfileGroup{} }
func (m *ActionProfileGroup) String() string            { return proto.CompactTextString(m) }
func (*ActionProfileGroup) ProtoMessage()               {}
func (*ActionProfileGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ActionProfileGroup) GetActionProfileId() uint32 {
	if m != nil {
		return m.ActionProfileId
	}
	return 0
}

func (m *ActionProfileGroup) GetGroupId() uint32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ActionProfileGroup) GetType() ActionProfileGroup_Type {
	if m != nil {
		return m.Type
	}
	return ActionProfileGroup_UNSPECIFIED
}

func (m *ActionProfileGroup) GetMembers() []*ActionProfileGroup_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ActionProfileGroup) GetMaxSize() int32 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

type ActionProfileGroup_Member struct {
	MemberId uint32 `protobuf:"varint,1,opt,name=member_id,json=memberId" json:"member_id,omitempty"`
	Weight   int32  `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	Watch    uint32 `protobuf:"varint,3,opt,name=watch" json:"watch,omitempty"`
}

func (m *ActionProfileGroup_Member) Reset()                    { *m = ActionProfileGroup_Member{} }
func (m *ActionProfileGroup_Member) String() string            { return proto.CompactTextString(m) }
func (*ActionProfileGroup_Member) ProtoMessage()               {}
func (*ActionProfileGroup_Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

func (m *ActionProfileGroup_Member) GetMemberId() uint32 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *ActionProfileGroup_Member) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *ActionProfileGroup_Member) GetWatch() uint32 {
	if m != nil {
		return m.Watch
	}
	return 0
}

// ------------------------------------------------------------------------------
// For WriteRequest, Update.Type must be MODIFY.
// For ReadRequest, the scope is defined as follows:
// - All meter cells for all meters if meter_id = 0 (default).
// - All meter cells for given meter_id if index = 0 (default).
type MeterEntry struct {
	MeterId uint32       `protobuf:"varint,1,opt,name=meter_id,json=meterId" json:"meter_id,omitempty"`
	Index   int64        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Config  *MeterConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *MeterEntry) Reset()                    { *m = MeterEntry{} }
func (m *MeterEntry) String() string            { return proto.CompactTextString(m) }
func (*MeterEntry) ProtoMessage()               {}
func (*MeterEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MeterEntry) GetMeterId() uint32 {
	if m != nil {
		return m.MeterId
	}
	return 0
}

func (m *MeterEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MeterEntry) GetConfig() *MeterConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// ------------------------------------------------------------------------------
// For WriteRequest, Update.Type must be MODIFY.
// For ReadRequest, the scope is defined as follows:
// - All meter cells for all meters if meter_id = 0 (default).
// - All meter cells for given meter_id if table_entry.match is empty.
type DirectMeterEntry struct {
	MeterId uint32 `protobuf:"varint,1,opt,name=meter_id,json=meterId" json:"meter_id,omitempty"`
	// The associated table entry match.
	// table_entry.action is ignored. Other fields specify the match.
	TableEntry *TableEntry  `protobuf:"bytes,2,opt,name=table_entry,json=tableEntry" json:"table_entry,omitempty"`
	Config     *MeterConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *DirectMeterEntry) Reset()                    { *m = DirectMeterEntry{} }
func (m *DirectMeterEntry) String() string            { return proto.CompactTextString(m) }
func (*DirectMeterEntry) ProtoMessage()               {}
func (*DirectMeterEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DirectMeterEntry) GetMeterId() uint32 {
	if m != nil {
		return m.MeterId
	}
	return 0
}

func (m *DirectMeterEntry) GetTableEntry() *TableEntry {
	if m != nil {
		return m.TableEntry
	}
	return nil
}

func (m *DirectMeterEntry) GetConfig() *MeterConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// Modeled as RFC 2698: A Two Rate Three Color Marker (trTCM)
// The trTCM meters a packet stream and marks its packets based on two rates,
// Peak Information Rate (PIR) and Committed Information Rate (CIR), and their
// associated burst sizes to be either green, yellow, or red.  A packet is
// marked red if it exceeds the PIR.  Otherwise it is marked either yellow or
// green depending on whether it exceeds or doesn't exceed the CIR.
//
// TODO: This is not metering protocol-independent!
type MeterConfig struct {
	// Committed information rate (units per sec)
	Cir int64 `protobuf:"varint,1,opt,name=cir" json:"cir,omitempty"`
	// Committed burst size
	Cburst int64 `protobuf:"varint,2,opt,name=cburst" json:"cburst,omitempty"`
	// Peak information rate (units per sec)
	Pir int64 `protobuf:"varint,3,opt,name=pir" json:"pir,omitempty"`
	// Peak burst size
	Pburst int64 `protobuf:"varint,4,opt,name=pburst" json:"pburst,omitempty"`
}

func (m *MeterConfig) Reset()                    { *m = MeterConfig{} }
func (m *MeterConfig) String() string            { return proto.CompactTextString(m) }
func (*MeterConfig) ProtoMessage()               {}
func (*MeterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MeterConfig) GetCir() int64 {
	if m != nil {
		return m.Cir
	}
	return 0
}

func (m *MeterConfig) GetCburst() int64 {
	if m != nil {
		return m.Cburst
	}
	return 0
}

func (m *MeterConfig) GetPir() int64 {
	if m != nil {
		return m.Pir
	}
	return 0
}

func (m *MeterConfig) GetPburst() int64 {
	if m != nil {
		return m.Pburst
	}
	return 0
}

// ------------------------------------------------------------------------------
// For WriteRequest, Update.Type must be MODIFY.
// For ReadRequest, the scope is defined as follows:
// - All counter cells for all meters if counter_id = 0 (default).
// - All counter cells for given counter_id if index = 0 (default).
type CounterEntry struct {
	CounterId uint32       `protobuf:"varint,1,opt,name=counter_id,json=counterId" json:"counter_id,omitempty"`
	Index     int64        `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Data      *CounterData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *CounterEntry) Reset()                    { *m = CounterEntry{} }
func (m *CounterEntry) String() string            { return proto.CompactTextString(m) }
func (*CounterEntry) ProtoMessage()               {}
func (*CounterEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CounterEntry) GetCounterId() uint32 {
	if m != nil {
		return m.CounterId
	}
	return 0
}

func (m *CounterEntry) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CounterEntry) GetData() *CounterData {
	if m != nil {
		return m.Data
	}
	return nil
}

// ------------------------------------------------------------------------------
// For WriteRequest, Update.Type must be MODIFY.
// For ReadRequest, the scope is defined as follows:
// - All counter cells for all meters if counter_id = 0 (default).
// - All counter cells for given counter_id if table_entry.match is empty.
type DirectCounterEntry struct {
	CounterId uint32 `protobuf:"varint,1,opt,name=counter_id,json=counterId" json:"counter_id,omitempty"`
	// The associated table entry match.
	// table_entry.action is ignored. Other fields specify the match.
	TableEntry *TableEntry  `protobuf:"bytes,2,opt,name=table_entry,json=tableEntry" json:"table_entry,omitempty"`
	Data       *CounterData `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *DirectCounterEntry) Reset()                    { *m = DirectCounterEntry{} }
func (m *DirectCounterEntry) String() string            { return proto.CompactTextString(m) }
func (*DirectCounterEntry) ProtoMessage()               {}
func (*DirectCounterEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DirectCounterEntry) GetCounterId() uint32 {
	if m != nil {
		return m.CounterId
	}
	return 0
}

func (m *DirectCounterEntry) GetTableEntry() *TableEntry {
	if m != nil {
		return m.TableEntry
	}
	return nil
}

func (m *DirectCounterEntry) GetData() *CounterData {
	if m != nil {
		return m.Data
	}
	return nil
}

type CounterData struct {
	ByteCount   int64 `protobuf:"varint,1,opt,name=byte_count,json=byteCount" json:"byte_count,omitempty"`
	PacketCount int64 `protobuf:"varint,2,opt,name=packet_count,json=packetCount" json:"packet_count,omitempty"`
}

func (m *CounterData) Reset()                    { *m = CounterData{} }
func (m *CounterData) String() string            { return proto.CompactTextString(m) }
func (*CounterData) ProtoMessage()               {}
func (*CounterData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CounterData) GetByteCount() int64 {
	if m != nil {
		return m.ByteCount
	}
	return 0
}

func (m *CounterData) GetPacketCount() int64 {
	if m != nil {
		return m.PacketCount
	}
	return 0
}

// ------------------------------------------------------------------------------
type StreamMessageRequest struct {
	// Types that are valid to be assigned to Update:
	//	*StreamMessageRequest_Arbitration
	//	*StreamMessageRequest_Packet
	Update isStreamMessageRequest_Update `protobuf_oneof:"update"`
}

func (m *StreamMessageRequest) Reset()                    { *m = StreamMessageRequest{} }
func (m *StreamMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamMessageRequest) ProtoMessage()               {}
func (*StreamMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type isStreamMessageRequest_Update interface {
	isStreamMessageRequest_Update()
}

type StreamMessageRequest_Arbitration struct {
	Arbitration *MasterArbitrationUpdate `protobuf:"bytes,1,opt,name=arbitration,oneof"`
}
type StreamMessageRequest_Packet struct {
	Packet *PacketOut `protobuf:"bytes,2,opt,name=packet,oneof"`
}

func (*StreamMessageRequest_Arbitration) isStreamMessageRequest_Update() {}
func (*StreamMessageRequest_Packet) isStreamMessageRequest_Update()      {}

func (m *StreamMessageRequest) GetUpdate() isStreamMessageRequest_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *StreamMessageRequest) GetArbitration() *MasterArbitrationUpdate {
	if x, ok := m.GetUpdate().(*StreamMessageRequest_Arbitration); ok {
		return x.Arbitration
	}
	return nil
}

func (m *StreamMessageRequest) GetPacket() *PacketOut {
	if x, ok := m.GetUpdate().(*StreamMessageRequest_Packet); ok {
		return x.Packet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessageRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessageRequest_OneofMarshaler, _StreamMessageRequest_OneofUnmarshaler, _StreamMessageRequest_OneofSizer, []interface{}{
		(*StreamMessageRequest_Arbitration)(nil),
		(*StreamMessageRequest_Packet)(nil),
	}
}

func _StreamMessageRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessageRequest)
	// update
	switch x := m.Update.(type) {
	case *StreamMessageRequest_Arbitration:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arbitration); err != nil {
			return err
		}
	case *StreamMessageRequest_Packet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Packet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessageRequest.Update has unexpected type %T", x)
	}
	return nil
}

func _StreamMessageRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessageRequest)
	switch tag {
	case 1: // update.arbitration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MasterArbitrationUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &StreamMessageRequest_Arbitration{msg}
		return true, err
	case 2: // update.packet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PacketOut)
		err := b.DecodeMessage(msg)
		m.Update = &StreamMessageRequest_Packet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessageRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessageRequest)
	// update
	switch x := m.Update.(type) {
	case *StreamMessageRequest_Arbitration:
		s := proto.Size(x.Arbitration)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessageRequest_Packet:
		s := proto.Size(x.Packet)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Packet sent from the controller to the switch.
type PacketOut struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// This will be based on P4 header annotated as
	// @controller_header("packet_out").
	// At most one P4 header can have this annotation.
	Metadata []*PacketMetadata `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty"`
}

func (m *PacketOut) Reset()                    { *m = PacketOut{} }
func (m *PacketOut) String() string            { return proto.CompactTextString(m) }
func (*PacketOut) ProtoMessage()               {}
func (*PacketOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PacketOut) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PacketOut) GetMetadata() []*PacketMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type StreamMessageResponse struct {
	// Types that are valid to be assigned to Update:
	//	*StreamMessageResponse_Arbitration
	//	*StreamMessageResponse_Packet
	Update isStreamMessageResponse_Update `protobuf_oneof:"update"`
}

func (m *StreamMessageResponse) Reset()                    { *m = StreamMessageResponse{} }
func (m *StreamMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamMessageResponse) ProtoMessage()               {}
func (*StreamMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type isStreamMessageResponse_Update interface {
	isStreamMessageResponse_Update()
}

type StreamMessageResponse_Arbitration struct {
	Arbitration *MasterArbitrationUpdate `protobuf:"bytes,1,opt,name=arbitration,oneof"`
}
type StreamMessageResponse_Packet struct {
	Packet *PacketIn `protobuf:"bytes,2,opt,name=packet,oneof"`
}

func (*StreamMessageResponse_Arbitration) isStreamMessageResponse_Update() {}
func (*StreamMessageResponse_Packet) isStreamMessageResponse_Update()      {}

func (m *StreamMessageResponse) GetUpdate() isStreamMessageResponse_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *StreamMessageResponse) GetArbitration() *MasterArbitrationUpdate {
	if x, ok := m.GetUpdate().(*StreamMessageResponse_Arbitration); ok {
		return x.Arbitration
	}
	return nil
}

func (m *StreamMessageResponse) GetPacket() *PacketIn {
	if x, ok := m.GetUpdate().(*StreamMessageResponse_Packet); ok {
		return x.Packet
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessageResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessageResponse_OneofMarshaler, _StreamMessageResponse_OneofUnmarshaler, _StreamMessageResponse_OneofSizer, []interface{}{
		(*StreamMessageResponse_Arbitration)(nil),
		(*StreamMessageResponse_Packet)(nil),
	}
}

func _StreamMessageResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessageResponse)
	// update
	switch x := m.Update.(type) {
	case *StreamMessageResponse_Arbitration:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Arbitration); err != nil {
			return err
		}
	case *StreamMessageResponse_Packet:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Packet); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessageResponse.Update has unexpected type %T", x)
	}
	return nil
}

func _StreamMessageResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessageResponse)
	switch tag {
	case 1: // update.arbitration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MasterArbitrationUpdate)
		err := b.DecodeMessage(msg)
		m.Update = &StreamMessageResponse_Arbitration{msg}
		return true, err
	case 2: // update.packet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PacketIn)
		err := b.DecodeMessage(msg)
		m.Update = &StreamMessageResponse_Packet{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessageResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessageResponse)
	// update
	switch x := m.Update.(type) {
	case *StreamMessageResponse_Arbitration:
		s := proto.Size(x.Arbitration)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessageResponse_Packet:
		s := proto.Size(x.Packet)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Packet sent from the switch to the controller.
type PacketIn struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// This will be based on P4 header annotated as
	// @controller_header("packet_in").
	// At most one P4 header can have this annotation.
	Metadata []*PacketMetadata `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty"`
}

func (m *PacketIn) Reset()                    { *m = PacketIn{} }
func (m *PacketIn) String() string            { return proto.CompactTextString(m) }
func (*PacketIn) ProtoMessage()               {}
func (*PacketIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PacketIn) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PacketIn) GetMetadata() []*PacketMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// Any metadata associated with Packet-IO (controller Packet-In or Packet-Out)
// needs to be modeled as P4 headers carrying special annotations
// @controller_metadata("packet_out") and @controller_metadata("packet_in")
// respectively. There can be at most one header each with these annotations.
// These special headers are captured in P4Info ControllerPacketMetadata.
type PacketMetadata struct {
	// This refers to Metadata.id coming from P4Info ControllerPacketMetadata.
	MetadataId uint32 `protobuf:"varint,1,opt,name=metadata_id,json=metadataId" json:"metadata_id,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PacketMetadata) Reset()                    { *m = PacketMetadata{} }
func (m *PacketMetadata) String() string            { return proto.CompactTextString(m) }
func (*PacketMetadata) ProtoMessage()               {}
func (*PacketMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PacketMetadata) GetMetadataId() uint32 {
	if m != nil {
		return m.MetadataId
	}
	return 0
}

func (m *PacketMetadata) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type MasterArbitrationUpdate struct {
	DeviceId uint64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	// The stream RPC with the highest election_id is the master. The 'master'
	// controller instance populates this with its latest election_id. Switch
	// populates with the highest election ID it has received from all connected
	// controllers.
	ElectionId *Uint128 `protobuf:"bytes,2,opt,name=election_id,json=electionId" json:"election_id,omitempty"`
	// Switch populates this with OK for the client that is the master, and with
	// an error status for all other connected clients (at every mastership
	// change). The controller does not populate this field.
	Status *google_rpc.Status `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *MasterArbitrationUpdate) Reset()                    { *m = MasterArbitrationUpdate{} }
func (m *MasterArbitrationUpdate) String() string            { return proto.CompactTextString(m) }
func (*MasterArbitrationUpdate) ProtoMessage()               {}
func (*MasterArbitrationUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MasterArbitrationUpdate) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *MasterArbitrationUpdate) GetElectionId() *Uint128 {
	if m != nil {
		return m.ElectionId
	}
	return nil
}

func (m *MasterArbitrationUpdate) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

type Uint128 struct {
	// Highest 64 bits of a 128 bit number.
	High uint64 `protobuf:"varint,1,opt,name=high" json:"high,omitempty"`
	// Lowest 64 bits of a 128 bit number.
	Low uint64 `protobuf:"varint,2,opt,name=low" json:"low,omitempty"`
}

func (m *Uint128) Reset()                    { *m = Uint128{} }
func (m *Uint128) String() string            { return proto.CompactTextString(m) }
func (*Uint128) ProtoMessage()               {}
func (*Uint128) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Uint128) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Uint128) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

// ------------------------------------------------------------------------------
type SetForwardingPipelineConfigRequest struct {
	Action  SetForwardingPipelineConfigRequest_Action `protobuf:"varint,1,opt,name=action,enum=p4.SetForwardingPipelineConfigRequest_Action" json:"action,omitempty"`
	Configs []*ForwardingPipelineConfig               `protobuf:"bytes,2,rep,name=configs" json:"configs,omitempty"`
}

func (m *SetForwardingPipelineConfigRequest) Reset()         { *m = SetForwardingPipelineConfigRequest{} }
func (m *SetForwardingPipelineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*SetForwardingPipelineConfigRequest) ProtoMessage()    {}
func (*SetForwardingPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *SetForwardingPipelineConfigRequest) GetAction() SetForwardingPipelineConfigRequest_Action {
	if m != nil {
		return m.Action
	}
	return SetForwardingPipelineConfigRequest_UNSPECIFIED
}

func (m *SetForwardingPipelineConfigRequest) GetConfigs() []*ForwardingPipelineConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SetForwardingPipelineConfigResponse struct {
}

func (m *SetForwardingPipelineConfigResponse) Reset()         { *m = SetForwardingPipelineConfigResponse{} }
func (m *SetForwardingPipelineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*SetForwardingPipelineConfigResponse) ProtoMessage()    {}
func (*SetForwardingPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

type ForwardingPipelineConfig struct {
	DeviceId uint64            `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	P4Info   *p4_config.P4Info `protobuf:"bytes,2,opt,name=p4info" json:"p4info,omitempty"`
	// Target-specific P4 configuration.
	P4DeviceConfig []byte `protobuf:"bytes,3,opt,name=p4_device_config,json=p4DeviceConfig,proto3" json:"p4_device_config,omitempty"`
}

func (m *ForwardingPipelineConfig) Reset()                    { *m = ForwardingPipelineConfig{} }
func (m *ForwardingPipelineConfig) String() string            { return proto.CompactTextString(m) }
func (*ForwardingPipelineConfig) ProtoMessage()               {}
func (*ForwardingPipelineConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ForwardingPipelineConfig) GetDeviceId() uint64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *ForwardingPipelineConfig) GetP4Info() *p4_config.P4Info {
	if m != nil {
		return m.P4Info
	}
	return nil
}

func (m *ForwardingPipelineConfig) GetP4DeviceConfig() []byte {
	if m != nil {
		return m.P4DeviceConfig
	}
	return nil
}

type GetForwardingPipelineConfigRequest struct {
	DeviceIds []uint64 `protobuf:"varint,1,rep,packed,name=device_ids,json=deviceIds" json:"device_ids,omitempty"`
}

func (m *GetForwardingPipelineConfigRequest) Reset()         { *m = GetForwardingPipelineConfigRequest{} }
func (m *GetForwardingPipelineConfigRequest) String() string { return proto.CompactTextString(m) }
func (*GetForwardingPipelineConfigRequest) ProtoMessage()    {}
func (*GetForwardingPipelineConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *GetForwardingPipelineConfigRequest) GetDeviceIds() []uint64 {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type GetForwardingPipelineConfigResponse struct {
	Configs []*ForwardingPipelineConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *GetForwardingPipelineConfigResponse) Reset()         { *m = GetForwardingPipelineConfigResponse{} }
func (m *GetForwardingPipelineConfigResponse) String() string { return proto.CompactTextString(m) }
func (*GetForwardingPipelineConfigResponse) ProtoMessage()    {}
func (*GetForwardingPipelineConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *GetForwardingPipelineConfigResponse) GetConfigs() []*ForwardingPipelineConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "p4.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "p4.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "p4.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "p4.ReadResponse")
	proto.RegisterType((*Update)(nil), "p4.Update")
	proto.RegisterType((*Entity)(nil), "p4.Entity")
	proto.RegisterType((*ExternEntry)(nil), "p4.ExternEntry")
	proto.RegisterType((*TableEntry)(nil), "p4.TableEntry")
	proto.RegisterType((*FieldMatch)(nil), "p4.FieldMatch")
	proto.RegisterType((*FieldMatch_Exact)(nil), "p4.FieldMatch.Exact")
	proto.RegisterType((*FieldMatch_Ternary)(nil), "p4.FieldMatch.Ternary")
	proto.RegisterType((*FieldMatch_LPM)(nil), "p4.FieldMatch.LPM")
	proto.RegisterType((*FieldMatch_Range)(nil), "p4.FieldMatch.Range")
	proto.RegisterType((*FieldMatch_Valid)(nil), "p4.FieldMatch.Valid")
	proto.RegisterType((*TableAction)(nil), "p4.TableAction")
	proto.RegisterType((*Action)(nil), "p4.Action")
	proto.RegisterType((*Action_Param)(nil), "p4.Action.Param")
	proto.RegisterType((*ActionProfileMember)(nil), "p4.ActionProfileMember")
	proto.RegisterType((*ActionProfileGroup)(nil), "p4.ActionProfileGroup")
	proto.RegisterType((*ActionProfileGroup_Member)(nil), "p4.ActionProfileGroup.Member")
	proto.RegisterType((*MeterEntry)(nil), "p4.MeterEntry")
	proto.RegisterType((*DirectMeterEntry)(nil), "p4.DirectMeterEntry")
	proto.RegisterType((*MeterConfig)(nil), "p4.MeterConfig")
	proto.RegisterType((*CounterEntry)(nil), "p4.CounterEntry")
	proto.RegisterType((*DirectCounterEntry)(nil), "p4.DirectCounterEntry")
	proto.RegisterType((*CounterData)(nil), "p4.CounterData")
	proto.RegisterType((*StreamMessageRequest)(nil), "p4.StreamMessageRequest")
	proto.RegisterType((*PacketOut)(nil), "p4.PacketOut")
	proto.RegisterType((*StreamMessageResponse)(nil), "p4.StreamMessageResponse")
	proto.RegisterType((*PacketIn)(nil), "p4.PacketIn")
	proto.RegisterType((*PacketMetadata)(nil), "p4.PacketMetadata")
	proto.RegisterType((*MasterArbitrationUpdate)(nil), "p4.MasterArbitrationUpdate")
	proto.RegisterType((*Uint128)(nil), "p4.Uint128")
	proto.RegisterType((*SetForwardingPipelineConfigRequest)(nil), "p4.SetForwardingPipelineConfigRequest")
	proto.RegisterType((*SetForwardingPipelineConfigResponse)(nil), "p4.SetForwardingPipelineConfigResponse")
	proto.RegisterType((*ForwardingPipelineConfig)(nil), "p4.ForwardingPipelineConfig")
	proto.RegisterType((*GetForwardingPipelineConfigRequest)(nil), "p4.GetForwardingPipelineConfigRequest")
	proto.RegisterType((*GetForwardingPipelineConfigResponse)(nil), "p4.GetForwardingPipelineConfigResponse")
	proto.RegisterEnum("p4.Update_Type", Update_Type_name, Update_Type_value)
	proto.RegisterEnum("p4.ActionProfileGroup_Type", ActionProfileGroup_Type_name, ActionProfileGroup_Type_value)
	proto.RegisterEnum("p4.SetForwardingPipelineConfigRequest_Action", SetForwardingPipelineConfigRequest_Action_name, SetForwardingPipelineConfigRequest_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for P4Runtime service

type P4RuntimeClient interface {
	// Update one or more P4 entities on the target.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// Read one or more P4 entities from the target.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (P4Runtime_ReadClient, error)
	// Sets the P4 fowarding-pipeline config.
	SetForwardingPipelineConfig(ctx context.Context, in *SetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*SetForwardingPipelineConfigResponse, error)
	// Gets the current P4 fowarding-pipeline config.
	GetForwardingPipelineConfig(ctx context.Context, in *GetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*GetForwardingPipelineConfigResponse, error)
	// Represents the bidirectional stream between the controller and the
	// switch (initiated by the controller), and is managed for the following
	// purposes: - connection initiation through master arbitration -
	// indicating switch session liveness: the session is live when switch
	// sends
	//   a positive master arbitration update to the controller, and is
	//   considered dead when either the stream breaks or the switch sends a
	//   negative update for master arbitration
	// - the controller sending/receiving packets to/from the switch
	StreamChannel(ctx context.Context, opts ...grpc.CallOption) (P4Runtime_StreamChannelClient, error)
}

type p4RuntimeClient struct {
	cc *grpc.ClientConn
}

func NewP4RuntimeClient(cc *grpc.ClientConn) P4RuntimeClient {
	return &p4RuntimeClient{cc}
}

func (c *p4RuntimeClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/p4.P4Runtime/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4RuntimeClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (P4Runtime_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P4Runtime_serviceDesc.Streams[0], c.cc, "/p4.P4Runtime/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &p4RuntimeReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P4Runtime_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type p4RuntimeReadClient struct {
	grpc.ClientStream
}

func (x *p4RuntimeReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p4RuntimeClient) SetForwardingPipelineConfig(ctx context.Context, in *SetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*SetForwardingPipelineConfigResponse, error) {
	out := new(SetForwardingPipelineConfigResponse)
	err := grpc.Invoke(ctx, "/p4.P4Runtime/SetForwardingPipelineConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4RuntimeClient) GetForwardingPipelineConfig(ctx context.Context, in *GetForwardingPipelineConfigRequest, opts ...grpc.CallOption) (*GetForwardingPipelineConfigResponse, error) {
	out := new(GetForwardingPipelineConfigResponse)
	err := grpc.Invoke(ctx, "/p4.P4Runtime/GetForwardingPipelineConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p4RuntimeClient) StreamChannel(ctx context.Context, opts ...grpc.CallOption) (P4Runtime_StreamChannelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_P4Runtime_serviceDesc.Streams[1], c.cc, "/p4.P4Runtime/StreamChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &p4RuntimeStreamChannelClient{stream}
	return x, nil
}

type P4Runtime_StreamChannelClient interface {
	Send(*StreamMessageRequest) error
	Recv() (*StreamMessageResponse, error)
	grpc.ClientStream
}

type p4RuntimeStreamChannelClient struct {
	grpc.ClientStream
}

func (x *p4RuntimeStreamChannelClient) Send(m *StreamMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *p4RuntimeStreamChannelClient) Recv() (*StreamMessageResponse, error) {
	m := new(StreamMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for P4Runtime service

type P4RuntimeServer interface {
	// Update one or more P4 entities on the target.
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// Read one or more P4 entities from the target.
	Read(*ReadRequest, P4Runtime_ReadServer) error
	// Sets the P4 fowarding-pipeline config.
	SetForwardingPipelineConfig(context.Context, *SetForwardingPipelineConfigRequest) (*SetForwardingPipelineConfigResponse, error)
	// Gets the current P4 fowarding-pipeline config.
	GetForwardingPipelineConfig(context.Context, *GetForwardingPipelineConfigRequest) (*GetForwardingPipelineConfigResponse, error)
	// Represents the bidirectional stream between the controller and the
	// switch (initiated by the controller), and is managed for the following
	// purposes: - connection initiation through master arbitration -
	// indicating switch session liveness: the session is live when switch
	// sends
	//   a positive master arbitration update to the controller, and is
	//   considered dead when either the stream breaks or the switch sends a
	//   negative update for master arbitration
	// - the controller sending/receiving packets to/from the switch
	StreamChannel(P4Runtime_StreamChannelServer) error
}

func RegisterP4RuntimeServer(s *grpc.Server, srv P4RuntimeServer) {
	s.RegisterService(&_P4Runtime_serviceDesc, srv)
}

func _P4Runtime_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4RuntimeServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p4.P4Runtime/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4RuntimeServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4Runtime_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P4RuntimeServer).Read(m, &p4RuntimeReadServer{stream})
}

type P4Runtime_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type p4RuntimeReadServer struct {
	grpc.ServerStream
}

func (x *p4RuntimeReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _P4Runtime_SetForwardingPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetForwardingPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4RuntimeServer).SetForwardingPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p4.P4Runtime/SetForwardingPipelineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4RuntimeServer).SetForwardingPipelineConfig(ctx, req.(*SetForwardingPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4Runtime_GetForwardingPipelineConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetForwardingPipelineConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P4RuntimeServer).GetForwardingPipelineConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p4.P4Runtime/GetForwardingPipelineConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P4RuntimeServer).GetForwardingPipelineConfig(ctx, req.(*GetForwardingPipelineConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P4Runtime_StreamChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P4RuntimeServer).StreamChannel(&p4RuntimeStreamChannelServer{stream})
}

type P4Runtime_StreamChannelServer interface {
	Send(*StreamMessageResponse) error
	Recv() (*StreamMessageRequest, error)
	grpc.ServerStream
}

type p4RuntimeStreamChannelServer struct {
	grpc.ServerStream
}

func (x *p4RuntimeStreamChannelServer) Send(m *StreamMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *p4RuntimeStreamChannelServer) Recv() (*StreamMessageRequest, error) {
	m := new(StreamMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _P4Runtime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "p4.P4Runtime",
	HandlerType: (*P4RuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _P4Runtime_Write_Handler,
		},
		{
			MethodName: "SetForwardingPipelineConfig",
			Handler:    _P4Runtime_SetForwardingPipelineConfig_Handler,
		},
		{
			MethodName: "GetForwardingPipelineConfig",
			Handler:    _P4Runtime_GetForwardingPipelineConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _P4Runtime_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamChannel",
			Handler:       _P4Runtime_StreamChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/p4/p4runtime.proto",
}

func init() { proto.RegisterFile("proto/p4/p4runtime.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1894 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x18, 0xcb, 0x6e, 0x1b, 0xc9,
	0x91, 0xc3, 0xe1, 0x4b, 0x45, 0x4a, 0xa2, 0xda, 0xb2, 0x4d, 0x53, 0x31, 0xb2, 0x19, 0x3b, 0x5e,
	0xc5, 0x88, 0xc9, 0x5d, 0x2d, 0xb1, 0xde, 0x24, 0x87, 0x40, 0x96, 0x28, 0x89, 0x0b, 0xd1, 0x12,
	0x9a, 0xb2, 0x83, 0x1c, 0x02, 0xa2, 0xc5, 0x69, 0x51, 0x83, 0x25, 0x67, 0x26, 0xc3, 0xe1, 0x5a,
	0x5c, 0x04, 0x08, 0xb0, 0x97, 0x20, 0x41, 0x10, 0xe4, 0x90, 0x53, 0x7e, 0x21, 0x87, 0x7c, 0x59,
	0xbe, 0x21, 0x41, 0x55, 0xf7, 0x3c, 0x48, 0x51, 0x0f, 0x23, 0x7b, 0xeb, 0x7a, 0x75, 0x3d, 0xbb,
	0xaa, 0x66, 0xa0, 0xe6, 0x07, 0x5e, 0xe8, 0x35, 0xfd, 0x56, 0xd3, 0x6f, 0x05, 0x53, 0x37, 0x74,
	0xc6, 0xb2, 0x41, 0x28, 0x96, 0xf5, 0x5b, 0xf5, 0x27, 0x43, 0xcf, 0x1b, 0x8e, 0x64, 0x93, 0x30,
	0xe7, 0xd3, 0x8b, 0xa6, 0x70, 0x67, 0x8a, 0x5c, 0x7f, 0xac, 0x49, 0x81, 0x3f, 0x68, 0x4e, 0x42,
	0x11, 0x4e, 0x27, 0x9a, 0xf0, 0xc8, 0x6f, 0x35, 0x07, 0x9e, 0x7b, 0xe1, 0x0c, 0x9b, 0x7e, 0xcb,
	0x71, 0x2f, 0x3c, 0x85, 0xb7, 0xfe, 0x08, 0x95, 0xdf, 0x04, 0x4e, 0x28, 0xb9, 0xfc, 0xfd, 0x54,
	0x4e, 0x42, 0xb6, 0x05, 0x2b, 0xb6, 0xfc, 0xd6, 0x19, 0xc8, 0xbe, 0x63, 0xd7, 0x8c, 0x4f, 0x8c,
	0xed, 0x1c, 0x2f, 0x29, 0x44, 0xc7, 0x66, 0x3f, 0x87, 0xb2, 0x1c, 0xc9, 0x41, 0xe8, 0x78, 0x2e,
	0x92, 0xb3, 0x9f, 0x18, 0xdb, 0xe5, 0x9d, 0x72, 0xc3, 0x6f, 0x35, 0xde, 0x39, 0x6e, 0xf8, 0xf9,
	0xce, 0x57, 0x1c, 0x22, 0x7a, 0xc7, 0x66, 0xcf, 0xa1, 0x38, 0xf5, 0x6d, 0x11, 0xca, 0x49, 0xcd,
	0xfc, 0xc4, 0xdc, 0x2e, 0xef, 0x00, 0x71, 0x12, 0x8a, 0x47, 0x24, 0x6b, 0x1d, 0x56, 0xb5, 0x01,
	0x13, 0xdf, 0x73, 0x27, 0xd2, 0xe2, 0x50, 0xe6, 0x52, 0xd8, 0xf7, 0x32, 0xe8, 0x05, 0x94, 0xa4,
	0x1b, 0x3a, 0xa1, 0x23, 0x27, 0xb5, 0x6c, 0xa2, 0xa3, 0x8d, 0xb8, 0x19, 0x8f, 0x69, 0x16, 0x87,
	0x8a, 0xba, 0x53, 0xe9, 0x98, 0x93, 0x33, 0x6e, 0x96, 0x63, 0x75, 0x28, 0x0d, 0xbc, 0xb1, 0x3f,
	0x92, 0xa1, 0x24, 0x6f, 0x4b, 0x3c, 0x86, 0xad, 0xbf, 0x19, 0x50, 0x50, 0xce, 0xb0, 0x67, 0x90,
	0x0b, 0x67, 0xbe, 0x24, 0xf3, 0xd6, 0x76, 0xd6, 0x13, 0x37, 0x1b, 0x67, 0x33, 0x5f, 0x72, 0x22,
	0x32, 0x0b, 0x0a, 0x74, 0xef, 0x4c, 0xc7, 0x2d, 0xad, 0x51, 0x53, 0xac, 0x5f, 0x41, 0x0e, 0x25,
	0xd8, 0x3a, 0x94, 0xdf, 0xbd, 0xed, 0x9d, 0xb6, 0xf7, 0x3a, 0x07, 0x9d, 0xf6, 0x7e, 0x35, 0xc3,
	0x00, 0x0a, 0x9d, 0xb7, 0xbd, 0x36, 0x3f, 0xab, 0x1a, 0x78, 0xee, 0x9e, 0xec, 0x77, 0x0e, 0x7e,
	0x5b, 0xcd, 0xe2, 0x79, 0xbf, 0x7d, 0xdc, 0x3e, 0x6b, 0x57, 0x4d, 0xeb, 0x1f, 0x39, 0x28, 0xa8,
	0xfb, 0x58, 0x0b, 0x2a, 0xf2, 0x2a, 0x94, 0x81, 0xdb, 0x97, 0x6e, 0x18, 0xcc, 0xc8, 0xb0, 0xb2,
	0x32, 0xac, 0x4d, 0xf8, 0x36, 0xa2, 0x8f, 0x32, 0xbc, 0x2c, 0x13, 0x90, 0x7d, 0x0e, 0xe5, 0x50,
	0x9c, 0x8f, 0xa4, 0x16, 0x52, 0x66, 0xae, 0xa1, 0xd0, 0x19, 0xa2, 0x23, 0x19, 0x08, 0x63, 0x88,
	0x75, 0xe1, 0xa1, 0x50, 0xf5, 0xe0, 0x07, 0xde, 0x85, 0x33, 0x92, 0xfd, 0xb1, 0x1c, 0x9f, 0xcb,
	0xa0, 0x66, 0x92, 0xf0, 0x63, 0x14, 0xde, 0x25, 0x86, 0x53, 0x45, 0xef, 0x12, 0xf9, 0x28, 0xc3,
	0x1f, 0x88, 0xeb, 0x68, 0xf6, 0x35, 0x6c, 0x2e, 0x5c, 0x37, 0x0c, 0xbc, 0xa9, 0x5f, 0xcb, 0xd1,
	0x6d, 0x8f, 0xae, 0xdd, 0x76, 0x88, 0xd4, 0xa3, 0x0c, 0x67, 0xe2, 0x1a, 0x16, 0xbd, 0x19, 0xcb,
	0x50, 0x06, 0xda, 0x9b, 0x7c, 0xe2, 0x4d, 0x17, 0xd1, 0xb1, 0x37, 0xe3, 0x18, 0x62, 0xfb, 0xc0,
	0x6c, 0x27, 0x90, 0x83, 0xb0, 0x9f, 0x96, 0x2c, 0x90, 0xe4, 0x26, 0x4a, 0xee, 0x13, 0x75, 0x4e,
	0xbe, 0x6a, 0x2f, 0xe0, 0xd8, 0x6b, 0x58, 0x1d, 0x78, 0x53, 0x37, 0xb9, 0xa0, 0x48, 0x17, 0x54,
	0xf1, 0x82, 0x3d, 0x45, 0x88, 0x84, 0x2b, 0x83, 0x14, 0x8c, 0xde, 0x6b, 0xf5, 0xf3, 0xf2, 0xa5,
	0xc4, 0x7b, 0x65, 0xc0, 0xc2, 0x2d, 0xda, 0xe8, 0x34, 0xf6, 0x4d, 0x29, 0xaa, 0x36, 0xeb, 0x0f,
	0x50, 0x4e, 0xe5, 0x9c, 0x3d, 0x87, 0x35, 0x5d, 0x1a, 0x58, 0x95, 0xd1, 0xa3, 0x5a, 0xe5, 0xba,
	0x60, 0xb0, 0xfc, 0x3a, 0x36, 0xbe, 0x3a, 0xcd, 0xa5, 0xdf, 0xf9, 0x2a, 0x2f, 0x29, 0x44, 0xc7,
	0x66, 0x2f, 0x21, 0xaf, 0x0c, 0x33, 0x75, 0x64, 0x54, 0xd3, 0x69, 0x44, 0xfd, 0xa8, 0xb1, 0xeb,
	0xce, 0xb8, 0x62, 0xb1, 0xfe, 0x95, 0x05, 0x48, 0xaa, 0x87, 0x3d, 0x81, 0x92, 0x2a, 0xb1, 0x58,
	0x6f, 0x91, 0x60, 0x6a, 0x17, 0xf9, 0xb1, 0x08, 0x07, 0x97, 0xfa, 0x21, 0x53, 0xa6, 0x0e, 0x1c,
	0x39, 0xb2, 0xbb, 0x88, 0xe5, 0x8a, 0xc8, 0x3e, 0x85, 0x82, 0xca, 0xb5, 0x56, 0xbe, 0x1e, 0x97,
	0xa7, 0x2a, 0x0c, 0xae, 0xc9, 0xf8, 0x74, 0xfd, 0xc0, 0xf1, 0x02, 0x7c, 0x70, 0x58, 0x3e, 0x79,
	0x1e, 0xc3, 0xac, 0x09, 0x0f, 0x06, 0x9e, 0x1b, 0x06, 0xde, 0x68, 0x24, 0x03, 0xcc, 0xb5, 0xb0,
	0x45, 0x28, 0xa8, 0x44, 0x72, 0x9c, 0x25, 0xa4, 0xae, 0xa6, 0xb0, 0x1d, 0xa8, 0xa8, 0x8a, 0x50,
	0x2d, 0x54, 0x97, 0xc4, 0x7a, 0x5c, 0x4c, 0x7b, 0x84, 0xe6, 0xaa, 0xe0, 0x14, 0x80, 0x32, 0x51,
	0x1a, 0xe9, 0xf6, 0x62, 0x22, 0xa3, 0x33, 0xb5, 0x2f, 0x42, 0xc1, 0xcb, 0x83, 0x04, 0xb0, 0xfe,
	0x6b, 0x02, 0x24, 0x3e, 0x63, 0xb4, 0x2e, 0x10, 0x4a, 0x45, 0x8b, 0x60, 0x6a, 0xc5, 0x79, 0x79,
	0x25, 0x06, 0xa1, 0x7e, 0xa5, 0x9b, 0xf3, 0xd1, 0x6a, 0xb4, 0x91, 0x76, 0x94, 0xe1, 0x8a, 0x89,
	0xed, 0x40, 0x11, 0x73, 0x27, 0xe2, 0x9c, 0x3d, 0x5a, 0xe0, 0x3f, 0x53, 0xd4, 0xa3, 0x0c, 0x8f,
	0x18, 0xd9, 0x0b, 0x30, 0x47, 0xfe, 0x58, 0x3f, 0x3d, 0xb6, 0xc0, 0x7f, 0x7c, 0xda, 0x3d, 0xca,
	0x70, 0x64, 0x40, 0x4b, 0x02, 0xe1, 0x0e, 0x65, 0xfa, 0x9d, 0xa4, 0x38, 0x39, 0xd2, 0xd0, 0x12,
	0x62, 0x42, 0xee, 0x6f, 0xc5, 0xc8, 0xb1, 0x75, 0x38, 0x16, 0xb9, 0xdf, 0x23, 0x0d, 0xb9, 0x89,
	0xa9, 0xfe, 0x14, 0xf2, 0xe4, 0x09, 0xdb, 0x24, 0xb1, 0xa9, 0x6a, 0xb1, 0x15, 0xae, 0x80, 0xfa,
	0x17, 0x50, 0xd4, 0x86, 0x2f, 0x67, 0x60, 0x0c, 0x72, 0x63, 0x31, 0xf9, 0x86, 0x82, 0x54, 0xe1,
	0x74, 0xae, 0xff, 0x12, 0xcc, 0xe3, 0xd3, 0xee, 0x0d, 0x02, 0x4f, 0x01, 0xfc, 0x40, 0x5e, 0x38,
	0x57, 0xfd, 0x91, 0x74, 0x49, 0x2c, 0xcf, 0x57, 0x14, 0xe6, 0x58, 0xba, 0xf5, 0x57, 0x90, 0x27,
	0x7f, 0x58, 0x15, 0xcc, 0x91, 0xf7, 0x41, 0xcb, 0xe2, 0x11, 0x55, 0x5d, 0x3a, 0xc3, 0xcb, 0x48,
	0x15, 0x9e, 0xd1, 0x7c, 0x72, 0x68, 0x5e, 0x59, 0x49, 0x2b, 0x7b, 0xc3, 0xa0, 0xaa, 0xd2, 0x4b,
	0xa5, 0x4d, 0xef, 0xd1, 0xfa, 0xb7, 0x01, 0xe5, 0x54, 0x39, 0xb3, 0xe7, 0x71, 0xbd, 0x1b, 0xc9,
	0xd4, 0x50, 0xb4, 0xa3, 0x4c, 0x5c, 0xec, 0xbf, 0x80, 0xda, 0xd2, 0x36, 0x1c, 0xbf, 0xde, 0xa3,
	0x0c, 0x7f, 0xb8, 0xa4, 0xe1, 0x76, 0x6c, 0xf6, 0x1a, 0x1e, 0x2f, 0x6b, 0xb9, 0x28, 0x69, 0x6a,
	0xc9, 0xcd, 0xeb, 0xdd, 0xb5, 0x63, 0xbf, 0x29, 0xa8, 0xa1, 0x67, 0xfd, 0xd9, 0x80, 0x82, 0x36,
	0x76, 0x0b, 0x56, 0x44, 0xbc, 0x1d, 0xa8, 0x82, 0x2d, 0x89, 0x68, 0x1d, 0xd8, 0x86, 0x82, 0x2f,
	0x02, 0x31, 0x9e, 0xd4, 0x72, 0xf4, 0xc0, 0xab, 0x89, 0x27, 0x8d, 0x53, 0x24, 0x70, 0x4d, 0xaf,
	0x7f, 0x05, 0x79, 0x42, 0x60, 0xfd, 0x13, 0x2a, 0x69, 0x42, 0x45, 0x82, 0x3b, 0xa9, 0x88, 0x9a,
	0xa9, 0xf4, 0x59, 0xdf, 0x1b, 0xf0, 0x60, 0xc9, 0xb8, 0x61, 0x2f, 0x61, 0x63, 0xc1, 0xc9, 0xd8,
	0xc0, 0xf5, 0x39, 0xe7, 0x54, 0xeb, 0x5b, 0x08, 0x1e, 0x2f, 0x8d, 0xa3, 0x68, 0x59, 0x0b, 0xed,
	0x27, 0x95, 0x8e, 0x28, 0x19, 0xd6, 0x7f, 0xb2, 0xc0, 0xae, 0x4f, 0xa9, 0x8f, 0xb2, 0xe1, 0x09,
	0x94, 0xe2, 0x2c, 0x68, 0xc7, 0x87, 0x2a, 0xec, 0xac, 0xa9, 0x77, 0x0d, 0x93, 0x76, 0x8d, 0xad,
	0xe5, 0x23, 0x31, 0xbd, 0x77, 0xbc, 0x86, 0xa2, 0x32, 0x3f, 0x0a, 0xfc, 0xd3, 0x1b, 0x64, 0x54,
	0xac, 0x78, 0xc4, 0x8d, 0x46, 0x8c, 0xc5, 0x55, 0x7f, 0xe2, 0x7c, 0x27, 0xa9, 0x35, 0xe6, 0x79,
	0x71, 0x2c, 0xae, 0x7a, 0xce, 0x77, 0xb2, 0xde, 0x83, 0x82, 0x8e, 0xec, 0x5c, 0xb4, 0x8c, 0x85,
	0x68, 0x3d, 0x82, 0xc2, 0x07, 0xe9, 0x0c, 0x2f, 0x43, 0xfd, 0x92, 0x34, 0x84, 0xc9, 0xfb, 0x40,
	0xad, 0x9e, 0x2a, 0x8c, 0x2b, 0xc0, 0xfa, 0xf2, 0x96, 0xe5, 0xa7, 0xd7, 0x3e, 0x6e, 0xef, 0xe1,
	0xf2, 0xb3, 0x01, 0xab, 0x07, 0xbb, 0xbd, 0xb3, 0xfe, 0xc1, 0x6e, 0xe7, 0xf8, 0xe4, 0x7d, 0x9b,
	0x57, 0xb3, 0xd6, 0x05, 0x40, 0x6a, 0xfa, 0xa2, 0xd5, 0xd4, 0xaa, 0x93, 0x9e, 0x49, 0xb0, 0xaa,
	0x19, 0xc7, 0xb5, 0xe5, 0x15, 0x59, 0x63, 0x72, 0x05, 0xe0, 0x44, 0xd1, 0x5d, 0xdd, 0x5c, 0xde,
	0xd5, 0x35, 0xd9, 0xfa, 0x93, 0x01, 0xd5, 0xc5, 0x05, 0xe0, 0x36, 0x75, 0xcd, 0x7b, 0xac, 0x53,
	0x73, 0xcb, 0xd4, 0xbd, 0x2d, 0x11, 0x50, 0x4e, 0xa1, 0xb1, 0x19, 0x0d, 0x9c, 0x80, 0xd4, 0x9b,
	0x1c, 0x8f, 0x18, 0xf8, 0xc1, 0xf9, 0x34, 0x98, 0x84, 0xda, 0x55, 0x0d, 0x21, 0xa7, 0xef, 0xa8,
	0xe5, 0xcc, 0xe4, 0x78, 0x44, 0x4e, 0x5f, 0x71, 0xe6, 0x14, 0xa7, 0x82, 0xac, 0x4b, 0xa8, 0xa4,
	0xf7, 0x09, 0x6c, 0x8c, 0xd1, 0x34, 0x8b, 0x3d, 0x5d, 0xd1, 0x98, 0x1b, 0x43, 0xfb, 0x0c, 0x72,
	0x34, 0xfa, 0xcc, 0xe5, 0xa3, 0x8f, 0x88, 0xd8, 0x3f, 0xd8, 0xf5, 0xb5, 0xe6, 0x2e, 0x85, 0x1f,
	0x1d, 0xdc, 0x7b, 0xd9, 0x72, 0x02, 0xe5, 0x14, 0x12, 0x6d, 0x38, 0x9f, 0x85, 0x52, 0xad, 0x63,
	0x3a, 0xbe, 0x2b, 0x88, 0x21, 0x26, 0xf6, 0x13, 0xa8, 0xf8, 0x62, 0xf0, 0x8d, 0xd4, 0xfb, 0x9a,
	0xf6, 0xbd, 0xac, 0x70, 0xc4, 0x62, 0xfd, 0xc5, 0x80, 0xcd, 0x5e, 0x18, 0x48, 0x31, 0xee, 0xca,
	0xc9, 0x44, 0x0c, 0xe3, 0xef, 0xac, 0x5f, 0x43, 0x59, 0x04, 0xe7, 0x4e, 0x18, 0x88, 0x54, 0x73,
	0xa7, 0xd7, 0xdc, 0x15, 0x93, 0x50, 0x06, 0xbb, 0x09, 0x51, 0x7d, 0x4a, 0xe0, 0xb2, 0x9e, 0x92,
	0xc0, 0x62, 0x51, 0x8a, 0xb4, 0xef, 0xab, 0x28, 0x7b, 0x4a, 0x98, 0x93, 0x29, 0x8e, 0x7e, 0x4d,
	0xc6, 0x4d, 0x50, 0x7d, 0x6b, 0x59, 0xef, 0x60, 0x25, 0x66, 0x60, 0x35, 0x28, 0xfa, 0x62, 0x36,
	0xf2, 0x84, 0xad, 0xa7, 0x58, 0x04, 0xb2, 0x06, 0x95, 0xb4, 0x5a, 0x89, 0xd4, 0x2e, 0xc6, 0x92,
	0xbb, 0xa3, 0x95, 0x88, 0xc7, 0x3c, 0xe8, 0xe3, 0xc3, 0x05, 0x1f, 0xf5, 0x67, 0xd6, 0xff, 0xed,
	0xe4, 0x8b, 0x05, 0x27, 0x2b, 0x89, 0x21, 0x1d, 0x77, 0xa9, 0x8f, 0x67, 0x50, 0x8a, 0xe8, 0x3f,
	0xa0, 0x8b, 0x87, 0xb0, 0x36, 0x4f, 0x63, 0x3f, 0xa6, 0xaf, 0x0b, 0x3a, 0x27, 0xf5, 0x09, 0x11,
	0x2a, 0x3d, 0xa0, 0xb2, 0xe9, 0x01, 0xf5, 0x77, 0x03, 0x1e, 0xdf, 0xe0, 0xfb, 0x0f, 0xf9, 0xe9,
	0xfd, 0x12, 0x0a, 0xea, 0xeb, 0x5f, 0x97, 0x3b, 0x8b, 0x56, 0xf4, 0xc0, 0x1f, 0x34, 0x7a, 0x44,
	0xe1, 0x9a, 0xc3, 0x6a, 0x42, 0x51, 0x5f, 0x11, 0xef, 0x30, 0x4a, 0x39, 0x9d, 0xa3, 0x4d, 0x27,
	0x4b, 0x28, 0x3c, 0x5a, 0xdf, 0x67, 0xc1, 0xea, 0xc9, 0xf0, 0xc0, 0x0b, 0x3e, 0x88, 0xc0, 0x76,
	0xdc, 0xe1, 0xa9, 0xe3, 0xcb, 0x91, 0xe3, 0x4a, 0xdd, 0xa5, 0x74, 0x85, 0xb7, 0xe7, 0x36, 0x97,
	0xb5, 0x9d, 0x57, 0x68, 0xec, 0xdd, 0x72, 0x0b, 0xd3, 0x94, 0x7d, 0x09, 0x45, 0xd5, 0xf5, 0xa2,
	0x2f, 0xfc, 0x1f, 0xd1, 0xca, 0x78, 0xd3, 0x25, 0x11, 0xb3, 0xf5, 0xbb, 0x78, 0x2b, 0x59, 0x36,
	0x4f, 0xde, 0xb7, 0x39, 0x7e, 0x40, 0x1b, 0xec, 0x01, 0xac, 0xab, 0x73, 0x7f, 0xf7, 0xed, 0x7e,
	0xbf, 0xb7, 0xfb, 0xbe, 0x5d, 0xcd, 0xb2, 0x87, 0xb0, 0x91, 0x42, 0xee, 0x9d, 0x74, 0xbb, 0x9d,
	0xb3, 0xaa, 0x89, 0x72, 0xfa, 0x9c, 0xb3, 0x7e, 0x0a, 0xcf, 0x6e, 0xf5, 0x45, 0xff, 0xcc, 0xf8,
	0xab, 0x01, 0xb5, 0x9b, 0x98, 0x6e, 0x4f, 0xf8, 0xcf, 0xa0, 0xa0, 0x7e, 0xd4, 0xe8, 0x5c, 0x6f,
	0xa0, 0xdb, 0xca, 0xb9, 0xc6, 0x69, 0xab, 0xe3, 0x5e, 0x78, 0x5c, 0x33, 0xb0, 0x6d, 0xa8, 0xfa,
	0xad, 0xbe, 0xbe, 0x2a, 0x35, 0x41, 0x2a, 0x7c, 0xcd, 0x6f, 0xed, 0x13, 0x5a, 0x69, 0xb4, 0xf6,
	0xc0, 0x3a, 0xbc, 0x3b, 0x73, 0x4f, 0x01, 0x62, 0xbb, 0xd4, 0xff, 0x91, 0x1c, 0x5f, 0x89, 0x0c,
	0xc3, 0xc8, 0x3e, 0x3b, 0xbc, 0xdb, 0xf5, 0x74, 0xe2, 0x8c, 0x8f, 0x48, 0xdc, 0xce, 0x3f, 0x4d,
	0x58, 0x39, 0x6d, 0x71, 0xf5, 0xd7, 0x8b, 0x35, 0x20, 0x4f, 0xbf, 0x87, 0x18, 0xad, 0x8b, 0xe9,
	0x5f, 0x55, 0xf5, 0x8d, 0x14, 0x46, 0x87, 0x3b, 0xc3, 0x5e, 0x41, 0x8e, 0x4b, 0x61, 0x33, 0x6a,
	0xf0, 0xa9, 0xff, 0x48, 0xf5, 0x6a, 0x82, 0x88, 0x98, 0x3f, 0x33, 0x98, 0x0f, 0x5b, 0xb7, 0xa4,
	0x91, 0xbd, 0xb8, 0x5f, 0xcd, 0xd6, 0x3f, 0xbd, 0x93, 0x2f, 0x36, 0xd0, 0x87, 0xad, 0xc3, 0xbb,
	0x34, 0x1e, 0xde, 0x53, 0xe3, 0xe1, 0xbd, 0x34, 0x7e, 0x0d, 0xab, 0xaa, 0x3d, 0xef, 0x5d, 0x0a,
	0xd7, 0x95, 0x23, 0x56, 0x23, 0x6b, 0x97, 0x4c, 0xa5, 0xfa, 0x93, 0x25, 0x94, 0xe8, 0x9e, 0x6d,
	0xe3, 0x33, 0xe3, 0xbc, 0x40, 0xdf, 0xf8, 0x5f, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xca,
	0xea, 0xe7, 0xa1, 0x14, 0x00, 0x00,
}
